{"ast":null,"code":"var _jsxFileName = \"/home/irfan/Desktop/go-workspace/src/github.com/swipesmart/client/src/components/jobs/jobs.js\";\nimport React, { useEffect, Fragment } from 'react';\nimport PropTypes from 'prop-types';\nimport { connect } from 'react-redux'; // import JobItem from './jobItem';\n\nimport { getAllJobs } from '../../actions/jobs';\nimport Spinner from '../layout/Spinner';\nimport { getCurrentProfile } from '../../actions/profile';\n\nconst AlljobsList = ({\n  getAllJobs,\n  jobItem: {\n    jobItem,\n    loading\n  }\n}) => {\n  useEffect(() => {\n    getAllJobs();\n  }, [getAllJobs]);\n  return loading && jobItem === null ? React.createElement(Spinner, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 18\n    },\n    __self: this\n  }) : React.createElement(Fragment, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 20\n    },\n    __self: this\n  }, React.createElement(\"h1\", {\n    className: \"large text-primary\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 21\n    },\n    __self: this\n  }, \"Dashboard\"), React.createElement(\"p\", {\n    className: \"lead\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 22\n    },\n    __self: this\n  }, React.createElement(\"i\", {\n    className: \"fas fa-user\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 23\n    },\n    __self: this\n  }), \" Welcome to swipe smart\"), jobItem !== null ? React.createElement(Fragment, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 27\n    },\n    __self: this\n  }, \"not null\") : React.createElement(Fragment, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 29\n    },\n    __self: this\n  }, \"null\"));\n};\n\nAlljobsList.propTypes = {\n  getAllJobs: PropTypes.func.isRequired,\n  jobItem: PropTypes.object.isRequired\n};\n\nconst mapStateToProps = state => ({\n  jobItem: state.jobItem\n});\n\nexport default connect(mapStateToProps, {\n  getAllJobs\n})(AlljobsList);","map":{"version":3,"sources":["/home/irfan/Desktop/go-workspace/src/github.com/swipesmart/client/src/components/jobs/jobs.js"],"names":["React","useEffect","Fragment","PropTypes","connect","getAllJobs","Spinner","getCurrentProfile","AlljobsList","jobItem","loading","propTypes","func","isRequired","object","mapStateToProps","state"],"mappings":";AAAA,OAAOA,KAAP,IAAgBC,SAAhB,EAA2BC,QAA3B,QAA2C,OAA3C;AACA,OAAOC,SAAP,MAAsB,YAAtB;AACA,SAASC,OAAT,QAAwB,aAAxB,C,CACA;;AACA,SAASC,UAAT,QAA2B,oBAA3B;AACA,OAAOC,OAAP,MAAoB,mBAApB;AACA,SAASC,iBAAT,QAAkC,uBAAlC;;AAGA,MAAMC,WAAW,GAAG,CAAC;AACjBH,EAAAA,UADiB;AAEjBI,EAAAA,OAAO,EAAE;AAACA,IAAAA,OAAD;AAAUC,IAAAA;AAAV;AAFQ,CAAD,KAGd;AACFT,EAAAA,SAAS,CAAC,MAAM;AACfI,IAAAA,UAAU;AACV,GAFQ,EAEN,CAACA,UAAD,CAFM,CAAT;AAGA,SAAOK,OAAO,IAAID,OAAO,KAAK,IAAvB,GACH,oBAAC,OAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IADG,GAGH,oBAAC,QAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACA;AAAI,IAAA,SAAS,EAAC,oBAAd;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,iBADA,EAEA;AAAG,IAAA,SAAS,EAAC,MAAb;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACE;AAAG,IAAA,SAAS,EAAC,aAAb;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IADF,4BAFA,EAMIA,OAAO,KAAK,IAAZ,GACI,oBAAC,QAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,gBADJ,GAGI,oBAAC,QAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,YATR,CAHJ;AAiBH,CAxBD;;AA0BAD,WAAW,CAACG,SAAZ,GAAwB;AACpBN,EAAAA,UAAU,EAAEF,SAAS,CAACS,IAAV,CAAeC,UADP;AAEpBJ,EAAAA,OAAO,EAAEN,SAAS,CAACW,MAAV,CAAiBD;AAFN,CAAxB;;AAKA,MAAME,eAAe,GAAGC,KAAK,KAAK;AAC9BP,EAAAA,OAAO,EAAEO,KAAK,CAACP;AADe,CAAL,CAA7B;;AAIA,eAAeL,OAAO,CAACW,eAAD,EAAkB;AAAEV,EAAAA;AAAF,CAAlB,CAAP,CAAyCG,WAAzC,CAAf","sourcesContent":["import React, { useEffect, Fragment } from 'react';\nimport PropTypes from 'prop-types';\nimport { connect } from 'react-redux';\n// import JobItem from './jobItem';\nimport { getAllJobs } from '../../actions/jobs';\nimport Spinner from '../layout/Spinner';\nimport { getCurrentProfile } from '../../actions/profile';\n\n\nconst AlljobsList = ({\n    getAllJobs,\n    jobItem: {jobItem, loading}\n}) => {\n    useEffect(() => {\n     getAllJobs();   \n    }, [getAllJobs]);\n    return loading && jobItem === null ? (\n        <Spinner />\n    ): (\n        <Fragment>\n        <h1 className='large text-primary'>Dashboard</h1>\n        <p className='lead'>\n          <i className='fas fa-user' /> Welcome to swipe smart\n        </p>\n        {\n            jobItem !== null ? (\n                <Fragment>not null</Fragment>\n            ):(\n                <Fragment>null</Fragment>\n            )\n        }\n        </Fragment>\n    );\n};\n\nAlljobsList.propTypes = {\n    getAllJobs: PropTypes.func.isRequired,\n    jobItem: PropTypes.object.isRequired,\n};\n\nconst mapStateToProps = state => ({\n    jobItem: state.jobItem\n});\n\nexport default connect(mapStateToProps, { getAllJobs })(AlljobsList);"]},"metadata":{},"sourceType":"module"}