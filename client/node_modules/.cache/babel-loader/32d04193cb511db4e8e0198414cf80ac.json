{"ast":null,"code":"import { createStore, applyMiddleware } from 'redux';\nimport { composeWithDevTools } from 'redux-devtools-extension';\nimport thunk from 'redux-thunk';\nimport rootReducer from './reducers';\nconst initialState = {};\nconst middleware = [thunk];\nconst store = createStore(rootReducer, initialState, composeWithDevTools(applyMiddleware(...middleware))); // set up a store subscription listener\n// to store the users token in localStorage\n\nlet currentState;\nstore.subscribe(() => {\n  // keep track of the previous and current state to compare changes\n  let previousState = currentState;\n  currentState = store.getState(); // if the token changes set the value in localStorage\n\n  if (previousState && previousState.auth.token !== currentState.auth.token) {\n    const token = currentState.auth.token;\n    token ? localStorage.setItem('token', token) : localStorage.removeItem('token');\n  }\n});\nexport default store;","map":{"version":3,"sources":["/home/irfan/Desktop/react_practice_workDirectory/devconnector_2.0-master/client/src/store.js"],"names":["createStore","applyMiddleware","composeWithDevTools","thunk","rootReducer","initialState","middleware","store","currentState","subscribe","previousState","getState","auth","token","localStorage","setItem","removeItem"],"mappings":"AAAA,SAASA,WAAT,EAAsBC,eAAtB,QAA6C,OAA7C;AACA,SAASC,mBAAT,QAAoC,0BAApC;AACA,OAAOC,KAAP,MAAkB,aAAlB;AACA,OAAOC,WAAP,MAAwB,YAAxB;AAEA,MAAMC,YAAY,GAAG,EAArB;AAEA,MAAMC,UAAU,GAAG,CAACH,KAAD,CAAnB;AAEA,MAAMI,KAAK,GAAGP,WAAW,CACvBI,WADuB,EAEvBC,YAFuB,EAGvBH,mBAAmB,CAACD,eAAe,CAAC,GAAGK,UAAJ,CAAhB,CAHI,CAAzB,C,CAMA;AACA;;AAEA,IAAIE,YAAJ;AAEAD,KAAK,CAACE,SAAN,CAAgB,MAAM;AACpB;AACA,MAAIC,aAAa,GAAGF,YAApB;AACAA,EAAAA,YAAY,GAAGD,KAAK,CAACI,QAAN,EAAf,CAHoB,CAIpB;;AACA,MAAID,aAAa,IAAIA,aAAa,CAACE,IAAd,CAAmBC,KAAnB,KAA6BL,YAAY,CAACI,IAAb,CAAkBC,KAApE,EAA2E;AACzE,UAAMA,KAAK,GAAGL,YAAY,CAACI,IAAb,CAAkBC,KAAhC;AACAA,IAAAA,KAAK,GACDC,YAAY,CAACC,OAAb,CAAqB,OAArB,EAA8BF,KAA9B,CADC,GAEDC,YAAY,CAACE,UAAb,CAAwB,OAAxB,CAFJ;AAGD;AACF,CAXD;AAaA,eAAeT,KAAf","sourcesContent":["import { createStore, applyMiddleware } from 'redux';\nimport { composeWithDevTools } from 'redux-devtools-extension';\nimport thunk from 'redux-thunk';\nimport rootReducer from './reducers';\n\nconst initialState = {};\n\nconst middleware = [thunk];\n\nconst store = createStore(\n  rootReducer,\n  initialState,\n  composeWithDevTools(applyMiddleware(...middleware))\n);\n\n// set up a store subscription listener\n// to store the users token in localStorage\n\nlet currentState;\n\nstore.subscribe(() => {\n  // keep track of the previous and current state to compare changes\n  let previousState = currentState;\n  currentState = store.getState();\n  // if the token changes set the value in localStorage\n  if (previousState && previousState.auth.token !== currentState.auth.token) {\n    const token = currentState.auth.token;\n    token\n      ? localStorage.setItem('token', token)\n      : localStorage.removeItem('token');\n  }\n});\n\nexport default store;\n"]},"metadata":{},"sourceType":"module"}