{"ast":null,"code":"import axios from 'axios';\nimport { setAlert } from './alert';\nimport { REGISTER_SUCCESS, REGISTER_FAIL, USER_LOADED, AUTH_ERROR, LOGIN_SUCCESS, LOGIN_FAIL, LOGOUT, CLEAR_PROFILE } from './types';\nimport setAuthToken from '../utils/setAuthToken'; // Load User\n\nexport const loadUser = () => async dispatch => {\n  const config = {\n    headers: {\n      'Content-Type': 'application/json',\n      'Authorization': localStorage.Token\n    }\n  };\n\n  if (localStorage.token) {\n    console.log('local storage');\n    setAuthToken(localStorage.Token);\n  }\n\n  try {\n    const res = await axios.get('/profile', config);\n    dispatch({\n      type: USER_LOADED,\n      payload: res.data\n    });\n  } catch (err) {\n    dispatch({\n      type: AUTH_ERROR\n    });\n  }\n}; // Register User\n\nexport const register = ({\n  username,\n  email,\n  password,\n  type\n}) => async dispatch => {\n  const config = {\n    headers: {\n      'Content-Type': 'application/json'\n    }\n  };\n  const body = JSON.stringify({\n    username,\n    email,\n    password,\n    type\n  });\n\n  try {\n    const res = await axios.post('/register', body, config);\n    dispatch({\n      type: REGISTER_SUCCESS,\n      payload: res.data\n    });\n  } catch (err) {\n    const errors = err.response.data.errors;\n\n    if (errors) {\n      errors.forEach(error => dispatch(setAlert(error.msg, 'danger')));\n    }\n\n    dispatch({\n      type: REGISTER_FAIL\n    });\n  }\n}; // Login User\n\nexport const login = (username, email, password) => async dispatch => {\n  const config = {\n    headers: {\n      'Content-Type': 'application/json'\n    }\n  };\n  const body = JSON.stringify({\n    username,\n    email,\n    password\n  });\n\n  try {\n    const res = await axios.post('/login', body, config);\n    dispatch({\n      type: LOGIN_SUCCESS,\n      payload: res.data\n    });\n    localStorage.setItem('Token', res.data.Token);\n    dispatch(loadUser());\n  } catch (err) {\n    const errors = err.response.data.errors;\n\n    if (errors) {\n      errors.forEach(error => dispatch(setAlert(error.msg, 'danger')));\n    }\n\n    dispatch({\n      type: LOGIN_FAIL\n    });\n  }\n}; // Logout / Clear Profile\n\nexport const logout = () => dispatch => {\n  dispatch({\n    type: CLEAR_PROFILE\n  });\n  dispatch({\n    type: LOGOUT\n  });\n};","map":{"version":3,"sources":["/home/irfan/Desktop/go-workspace/src/github.com/swipesmart/client/src/actions/auth.js"],"names":["axios","setAlert","REGISTER_SUCCESS","REGISTER_FAIL","USER_LOADED","AUTH_ERROR","LOGIN_SUCCESS","LOGIN_FAIL","LOGOUT","CLEAR_PROFILE","setAuthToken","loadUser","dispatch","config","headers","localStorage","Token","token","console","log","res","get","type","payload","data","err","register","username","email","password","body","JSON","stringify","post","errors","response","forEach","error","msg","login","setItem","logout"],"mappings":"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","sourcesContent":["import axios from 'axios';\nimport { setAlert } from './alert';\nimport {\n  REGISTER_SUCCESS,\n  REGISTER_FAIL,\n  USER_LOADED,\n  AUTH_ERROR,\n  LOGIN_SUCCESS,\n  LOGIN_FAIL,\n  LOGOUT,\n  CLEAR_PROFILE\n} from './types';\nimport setAuthToken from '../utils/setAuthToken';\n\n// Load User\nexport const loadUser = () => async dispatch => {\n  const config = {\n    headers: {\n      'Content-Type': 'application/json',\n      'Authorization': localStorage.Token\n    }\n  };\n  if (localStorage.token) {\n    console.log('local storage');\n    setAuthToken(localStorage.Token);\n  }\n\n  try {\n    const res = await axios.get('/profile', config);\n\n    dispatch({\n      type: USER_LOADED,\n      payload: res.data\n    });\n  } catch (err) {\n    dispatch({\n      type: AUTH_ERROR\n    });\n  }\n};\n\n// Register User\nexport const register = ({ username, email, password, type }) => async dispatch => {\n  const config = {\n    headers: {\n      'Content-Type': 'application/json'\n    }\n  };\n\n  const body = JSON.stringify({ username, email, password, type });\n  try {\n    const res = await axios.post('/register', body, config);\n\n    dispatch({\n      type: REGISTER_SUCCESS,\n      payload: res.data\n    });\n  } catch (err) {\n    const errors = err.response.data.errors;\n\n    if (errors) {\n      errors.forEach(error => dispatch(setAlert(error.msg, 'danger')));\n    }\n\n    dispatch({\n      type: REGISTER_FAIL\n    });\n  }\n};\n\n// Login User\nexport const login = (username,email, password) => async dispatch => {\n\n  const config = {\n    headers: {\n      'Content-Type': 'application/json'\n    }\n  };\n\n  const body = JSON.stringify({username, email, password });\n\n  try {\n    const res = await axios.post('/login', body, config);\n    dispatch({\n      type: LOGIN_SUCCESS,\n      payload: res.data\n    });\n    localStorage.setItem('Token', res.data.Token);\n    dispatch(loadUser());\n  } catch (err) {\n    const errors = err.response.data.errors;\n\n    if (errors) {\n      errors.forEach(error => dispatch(setAlert(error.msg, 'danger')));\n    }\n\n    dispatch({\n      type: LOGIN_FAIL\n    });\n  }\n};\n\n// Logout / Clear Profile\nexport const logout = () => dispatch => {\n  dispatch({ type: CLEAR_PROFILE });\n  dispatch({ type: LOGOUT });\n};\n"]},"metadata":{},"sourceType":"module"}